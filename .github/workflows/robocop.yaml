name: CI Pipeline

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      # required for issues to be recorded
      security-events: write
    # Allow the job to continue even if the robocop step fails
    continue-on-error: true
    strategy:
      matrix:
        python-version: [3.12]
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Python based on matrix version
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # Cache Poetry Virtual Environment
      - name: Cache Poetry Virtual Environment
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-venv-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-venv-

      # Install Poetry and project dependencies (including dev dependencies)
      - name: Install Poetry and dependencies
        run: |
          # Install Poetry
          curl -sSL https://install.python-poetry.org | python3 -
          # Install dependencies
          poetry install --with dev

      # Run tests using pytest with coverage
      - name: Run tests
        run: |
          poetry run pytest --cov

      # clean up python code
      - name: Python cleanliness
        run: |
          echo "üßπ Cleaning up python code stink with black library..."
          poetry run black .

      - name: Check Robocop Configuration
        run: |
          echo "üîç Checking active Robocop rules and configurations..."
          poetry run robocop --list

      # clean up robot code
      - name: Robot cleanliness
        run: |
          echo "‚öôÔ∏è Robotidy Configuration..."
          echo "We will be using this configuration to clean up your robot code. Any remaining code stink that robotidy doesn't support will have to be manually corrected."
          echo "üìÑ For more information on Robotidy transformers, visit: https://robotidy.readthedocs.io/en/latest/transformers/"
          poetry run robotidy --list
          echo "üßπ Cleaning up Robot code with Robotidy..."
          poetry run robotidy .
          echo "üîç Linting Robot code with Robocop..."
          echo "üìÑ For more information on Robocop error codes, visit: https://robocop.readthedocs.io/en/stable/rules_list.html"
          poetry run python -m robocop --reports sarif .

      # Upload artifacts (even if robocop step fails)
      - name: Upload SARIF file
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: .sarif.json
          category: robocop